syntax = "proto3";

package monad_proto.event;

import "basic.proto";
import "block.proto";
import "blocksync.proto";
import "message.proto";
import "quorum_certificate.proto";
import "signing.proto";
import "timeout.proto";
import "validator_data.proto";

// this type doesn't have a pair rust type
// conversion is done in ProtoConsensusEvent
message ProtoMessageWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoUnverifiedConsensusMessage unverified_message = 2;
}

message ProtoPaceMakerTimeout {
  // left empty on purpose
}

message ProtoBlockSyncTimeout {
  monad_proto.basic.ProtoBlockId block_id = 1;
}

message ProtoSendVote {
  monad_proto.basic.ProtoRound round = 1;
}

message ProtoScheduleTimeout {
  oneof event {
    ProtoPaceMakerTimeout pacemaker = 1;
    ProtoBlockSyncTimeout block_sync = 2;
  }
}

message ProtoProposedExecutionResult {
  monad_proto.basic.ProtoBlockId block_id = 2;
  monad_proto.basic.ProtoSeqNum seq_num = 3;
  monad_proto.basic.ProtoRound round = 4;
  bytes result = 5;
}

message ProtoFinalizedExecutionResult {
  monad_proto.basic.ProtoSeqNum seq_num = 1;
  bytes result = 2;
}

message ProtoTimestampUpdate {
   uint64 update = 1;
}

message ProtoBlockSyncFullBlocks {
  monad_proto.blocksync.ProtoBlockRange block_range = 1;
  repeated monad_proto.block.ProtoFullBlock full_blocks = 2;
}

message ProtoConsensusEvent {
  oneof event {
    ProtoMessageWithSender message = 1;
    ProtoPaceMakerTimeout timeout = 2;
    ProtoBlockSyncFullBlocks block_sync = 3;
    ProtoSendVote send_vote = 4;
  }
}

message ProtoBlockSyncRequestWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoBlockSyncRequestMessage request = 2;
}

message ProtoBlockSyncResponseWithSender {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoBlockSyncResponseMessage response = 2;
}

message ProtoBlockSyncEvent {
  oneof event {
    ProtoBlockSyncRequestWithSender request = 1;
    monad_proto.blocksync.ProtoBlockSyncSelfRequest self_request = 2;
    monad_proto.blocksync.ProtoBlockSyncSelfRequest self_cancel_request = 3;
    ProtoBlockSyncResponseWithSender response = 4;
    monad_proto.message.ProtoBlockSyncResponseMessage self_response = 5;
    monad_proto.message.ProtoBlockSyncRequestMessage timeout = 6;
  }
}

message ProtoValidatorEvent {
  oneof event {
    ProtoUpdateValidatorsEvent update_validators = 1;
  }
}

message ProtoProposal {
  monad_proto.basic.ProtoEpoch epoch = 1;
  monad_proto.basic.ProtoRound round = 2;
  monad_proto.basic.ProtoSeqNum seq_num = 3;
  monad_proto.quorum_certificate.ProtoQuorumCertificate high_qc = 4;
  uint64 timestamp_ns = 5;
  monad_proto.signing.ProtoSignature round_signature = 6;
  repeated bytes delayed_execution_results = 7;
  monad_proto.block.ProtoProposedExecutionInputs proposed_execution_inputs = 8;
  optional monad_proto.timeout.ProtoTimeoutCertificate last_round_tc = 9;
}

message ProtoForwardedTxs {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoForwardedTx forwarded_tx = 2;
}

message ProtoForwardTxs {
  repeated bytes txs = 1;
}

message ProtoMempoolEvent {
  oneof event {
    ProtoProposal proposal = 1;
    ProtoForwardedTxs forwarded_txs = 2;
    ProtoForwardTxs forward_txs = 3;
  }
}

message ProtoUpdateValidatorsEvent {
  monad_proto.validator_data.ProtoValidatorSetData validator_set_data = 1;
  monad_proto.basic.ProtoEpoch epoch = 2;
}

message ProtoExecutionResult {
  oneof event {
    ProtoProposedExecutionResult proposed = 1;
    ProtoFinalizedExecutionResult finalized = 2;
  }
}

message ProtoMetricsTimeout {}

message ProtoClearMetricsEvent {}
message ProtoUpdateLogFilter {
  string filter = 1;
}

message ProtoGetMetricsEvent {}

message ProtoGetPeersReq {}

message ProtoSockAddr {
  string addr = 1;
}

message ProtoPeerRecord {
  monad_proto.basic.ProtoNodeId node_id = 1;
  ProtoSockAddr addr = 2;
}

message ProtoGetPeersResp {
  repeated ProtoPeerRecord records = 1;
}

message ProtoGetPeersEvent {
  oneof req_resp {
    ProtoGetPeersReq req = 1;
    ProtoGetPeersResp resp = 2;
  }
}

message ProtoGetFullNodeReq {}

message ProtoGetFullNodeResp {
  repeated monad_proto.basic.ProtoNodeId node_ids = 1;

}

message ProtoGetFullNodesEvent {
  oneof req_resp {
    ProtoGetFullNodeReq req = 1;
    ProtoGetFullNodeResp resp = 2;
  }
}

message ProtoReloadConfigReq {}

message ProtoReloadConfigResp {
  string msg = 1;
}

message ProtoReloadConfigEvent {
  oneof req_resp {
    ProtoReloadConfigReq req = 1;
    ProtoReloadConfigResp resp = 2;
  }  
}

message ProtoControlPanelEvent {
  reserved 2,7,9;
  oneof event {
    ProtoUpdateLogFilter update_log_filter = 4;
    ProtoGetMetricsEvent get_metrics_event = 5;
    ProtoGetPeersEvent get_peers_event = 6;
    ProtoGetFullNodesEvent get_full_nodes_event = 8;
    ProtoReloadConfigEvent reload_config_event = 10;
  }
}

message ProtoInboundStateMessage {
  monad_proto.basic.ProtoNodeId sender = 1;
  monad_proto.message.ProtoStateSyncNetworkMessage message = 2;
}

message ProtoOutboundStateMessage {
  monad_proto.basic.ProtoNodeId recipient = 1;
  monad_proto.message.ProtoStateSyncNetworkMessage message = 2;
}

message ProtoDoneSync {
  monad_proto.basic.ProtoSeqNum seq_num = 1;
}

message ProtoRequestSync {
  monad_proto.block.ProtoBlockHeader root = 3;
  monad_proto.quorum_certificate.ProtoQuorumCertificate high_qc = 2;
}

message ProtoStateSyncEvent {
  oneof event {
    ProtoInboundStateMessage inbound = 1;
    ProtoOutboundStateMessage outbound = 2;
    ProtoDoneSync done_sync = 3;
    ProtoRequestSync request_sync = 4;
    ProtoBlockSyncFullBlocks block_sync = 5;
  }
}

message ProtoConfigUpdate {
  reserved 2,4;
  repeated monad_proto.basic.ProtoNodeId full_nodes = 1;
  repeated monad_proto.basic.ProtoNodeId blocksync_override_peers = 3;
}

message ProtoConfigLoadError {
  string msg = 1;
}

message ProtoKnownPeersUpdate {
  repeated ProtoPeerRecord known_peers = 1;
}

message ProtoConfigEvent {
  oneof event {
    ProtoConfigUpdate update = 1;
    ProtoConfigLoadError error = 2;
    ProtoKnownPeersUpdate known_peers_update = 3;
  }
}

message ProtoMonadEvent{
  oneof event {
    ProtoConsensusEvent consensus_event = 1;
    ProtoBlockSyncEvent block_sync_event = 2;
    ProtoValidatorEvent validator_event = 3;
    ProtoMempoolEvent mempool_event = 4;
    ProtoExecutionResult execution_result_event = 5;
    ProtoControlPanelEvent control_panel_event = 7;
    ProtoTimestampUpdate timestamp_update_event = 8;
    ProtoStateSyncEvent state_sync_event = 9;
    ProtoConfigEvent config_event = 10;
  }
}
