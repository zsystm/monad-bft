// DO NOT EDIT THIS FILE! If you need changes, change the code generator
// instead. This file was generated by running the following command:
//
//    util/ctypes/codegen/cg-ctypes -s libs/execution/ctypes rust -p
//    /home/ken/src/monad-bft/monad-exec-events/src -frustfmt +nightly

//! C layout-compatible types describing Ethereum blocks and transactions

#![allow(non_camel_case_types)]
#![allow(unused_imports)]

use alloy_primitives::{Address, B256, U256};

/// EIP-2718 code determining the transaction type
#[derive(Copy, Clone, Debug, Default, Eq, PartialEq, Hash)]
#[repr(u8)]
pub enum transaction_type {
    #[default]
    LEGACY,
    EIP2930,
    EIP1559,
}

/// Entry in a EIP-2930 storage access warmup list
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct access_list_entry {
    pub address: Address,       // E_a: addr of account whose storage to warm
    pub storage_key_count: u32, // Size of trailing E_s storage key array
}

/// Fields of an Ethereum transaction, except for the variably-sized fields
/// (`data` field, EIP-2930 access list, etc.).
///
/// This type contains the fixed-size fields present in any transaction type. If
/// a transaction type does not support a particular field, it will be zero-
/// initialized.
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct eth_txn_header {
    pub txn_type: transaction_type,     // EIP-2718 transaction type
    pub chain_id: U256,                 // T_c: EIP-155 blockchain identifier
    pub nonce: u64,                     // T_n: num txns sent by this sender
    pub gas_limit: u64,                 // T_g: max usable gas (upfront xfer)
    pub max_fee_per_gas: U256,          // T_m in EIP-1559 txns or T_p (gasPrice)
    pub max_priority_fee_per_gas: U256, // T_f in EIP-1559 txns, 0 otherwise
    pub value: U256,                    // T_v: wei xfered or contract endowment
    pub to: Address,                    // T_t: recipient or 0 (create contract)
    pub r: U256,                        // T_r: r value of ECDSA signature
    pub s: U256,                        // T_s: s value of ECDSA signature
    pub y_parity: bool,                 // Signature Y parity (see YP App. F)
    pub data_length: u32,               // Length of trailing `data` array
    pub access_list_count: u32,         // # of EIP-2930 AccessList entries
}

/// Result of executing a valid transaction
///
/// This type is designed for incremental, out-of-order reporting of transaction
/// results, so it differs from the formal definition of an Ethereum receipt
/// (e.g., gas used is not cumulative)
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct eth_txn_receipt {
    pub status: bool,   // EIP-658 status code
    pub log_count: u32, // Number of log entries
    pub gas_used: u64,  // Gas used by this txn only (not R_u)
}

/// Data record produced during the execution of a transaction
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct eth_txn_log {
    pub index: u32,       // Index of log in series
    pub address: Address, // Address of contract generating log
    pub topic_count: u8,  // Size of hash32 topic array after header
    pub data_length: u32, // Length of log data placed after header
}

/// Account state sigma[a] (except for storage root hash, sigma[a]_s)
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct eth_account_state {
    pub nonce: u64,      // sigma[a]_n: num tx sent from address
    pub balance: U256,   // sigma[a]_b: wei owned by address
    pub code_hash: B256, // sigma[a]_c: EVM code hash
}

/// Fields of an Ethereum block header which are known at the start of execution
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct eth_block_exec_input {
    pub ommers_hash: B256,       // H_o: hash of ommer blocks
    pub beneficiary: Address,    // H_c: recipient addr of prio gas fees
    pub transactions_root: B256, // H_t: hash of block txn list
    pub difficulty: u64,         // H_d: PoW difficulty scaling param
    pub number: u64,             // H_i: # of ancestor blocks ("height")
    pub gas_limit: u64,          // H_l: max gas expenditure we're allowed
    pub timestamp: u64,          // H_s: UNIX epoch timestamp of block inception
    pub extra_data: B256,        // H_x: extra metadata about this block
    pub extra_data_length: u64,  // Number of bytes used in H_x
    pub prev_randao: B256,       // H_a: source of randomness
    pub nonce: [u8; 8],          // H_n: PoW puzzle solution; now zero
    pub base_fee_per_gas: U256,  // H_f: wei burned per unit gas
    pub withdrawals_root: B256,  // H_w: consensus-initiated withdrawals
    pub txn_count: u64,          // Number of transactions in block
}

/// Fields of an Ethereum block header which are produced as a result of
/// execution
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
#[repr(C)]
pub struct eth_block_exec_output {
    pub state_root: B256,      // H_r: MPT root hash of state trie
    pub receipts_root: B256,   // H_e: MPT root hash of receipt trie
    pub logs_bloom: [u8; 256], // H_b: bloom filter of transaction logs
    pub gas_used: u64,         // H_g: gas used by all txns in block
}
